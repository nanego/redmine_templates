<div data-controller="template-form split-description">

  <%= labelled_form_for @issue_template, :html => { id: 'issue-template-form',
                                                    name: 'issue-template-form_name' } do |f| %>

    <%= error_messages_for 'issue_template' %>

    <div class="box tabular header">
      <div id="template_attributes">

        <div class="splitcontent">

          <div class="splitcontentleft">
            <p>
              <%= f.text_field :template_title, :size => 80, :maxlength => 255, :required => true %>
            </p>
            <p>
              <%= f.check_box :tracker_read_only, :no_label => false %>
            </p>
            <p>
              <%= f.check_box :show_on_overview, :no_label => false %>
            </p>
            <p>
              <%= f.check_box :hide_file_attachment, :no_label => false %>
            </p>
            <%= f.hidden_field :project_id, :value => (@project.try(:id) || @issue_template.project_id) %>
            <%= f.hidden_field :id, :value => @issue_template.id %>
            <% if Setting["plugin_redmine_templates"]["disable_templates"] %>
              <p>
                <%= f.check_box :template_enabled, :no_label => false %>
                <label class="inline" for="issue_template_is_enabled" id="issue_template_is_enabled"><%= l(:template_is_enabled) %></label>
              </p>
            <% end %>
            <p>
              <%= label :custom_form, l('form_type') %>
              <%= f.radio_button :custom_form, false, :checked => !f.object.custom_form?, 'data-action': "template-form#toogleForm" %>
              <%= f.label :custom_form, 'Standard', :value => false, class: "inline" %>
              <br>
              <%= f.radio_button :custom_form, true, :checked => f.object.custom_form?, 'data-action': "template-form#toogleForm", 'data-target': "template-form.custom_form_radio_button" %>
              <%= f.label :custom_form, 'Sur mesure', :value => true, class: "inline" %>
            </p>
            <p data-target="template-form.split_description">
              <%= f.label :split_description, l(:field_split_description) %>
              <%= f.check_box :split_description, :no_label => true,
                              :data => {
                                "action" => "split-description#toggleDescriptionField",
                                "target" => "split-description.split_description_checkbox"
                              }
              %>
            </p>
            <p>
              <%= f.text_field :custom_form_path, label: l('custom_form_path'), :size => 80, :maxlength => 255, :required => false,
                               placeholder: "Ex: issues/form_white_list",
                               'data-action': "input->template-form#reloadForm",
                               'data-target': "template-form.custom_form_path_text_field" %>
            </p>
          </div>

          <div class="splitcontentright">
            <div class="select_projects" id="select_projects">
              <%
                template_projects = @issue_template.assignable_projects || []
                allowed_projects = @issue_template.allowed_target_projects

                # Here, We use map instead of select('id','name') because of in the failure validation case for a non persisted template
                # :Associations::CollectionProxy select('id','name') will return []
                visible_projects = (allowed_projects.map(&:name) & template_projects.map(&:name))
                other_projects = (template_projects.map(&:name) - allowed_projects.map(&:name))

              %>
              <%= f.select :template_project_ids, project_tree_options(allowed_projects | template_projects, :selected => template_projects), { :required => true },
                           { :multiple => true, :size => 10, style: "display: none;" } %>
              <span id="my_projects">
                <% visible_projects.each do |project| %>

                  <%= content_tag("span", project.gsub(/ /, "&nbsp;").html_safe, class: "list_templates_projects_names") %>

                <% end %>
              </span>
              <% if other_projects.count > 0 %>
                <span class="list_templates_other_projects">
                  <% if visible_projects.count > 0 %>
                    <span class="and_x_other_projects"><%= l("support.array.sentence_connector") %></span>
                    <%= other_projects.count %>
                    <span class="and_x_other_projects"><%= other_projects.count > 1 ? l("other").pluralize : l("other") %></span>
                  <% else %>
                    <span class="and_x_other_projects" style="display: none;"><%= l("support.array.sentence_connector") %></span>
                    <%= other_projects.count %>
                    <span class="and_x_other_projects" style="display: none;"><%= other_projects.count > 1 ? l("other").pluralize : l("other") %></span>
                  <% end %>
                  <%= other_projects.count > 1 ? l("project").pluralize : l("project") %>
                </span>
              <% end %>
            </div>

            <%= link_to l("modify_projects"), '#', id: "link_update_project_list" %>

          </div>

        </div>

        <p>
          <%= f.text_area :template_description, :maxlength => 1024, :class => 'wiki-edit' %>
          <%= wikitoolbar_for 'issue_template_template_description' %>
        </p>
        <p>
          <%= f.text_field :template_image, :size => 80, :maxlength => 255, placeholder: 'Ex: alert' %>
          <br><%= link_to 'Liste des icones compatibles', 'https://octicons.github.com', target: '_blank' %>
        </p>

      </div>
    </div>

    <div class="box tabular" data-target="template-form.standard_form">
      <div id="issue_attributes">

        <p class="pull-right-with-margin">
          <%= f.check_box :is_private, :no_label => true %>
          <label class="inline" for="issue_is_private" id="issue_is_private_label"><%= l(:issue_is_private) %></label>
        </p>

        <p><%= f.select :tracker_id, Tracker.visible.sorted.collect { |t| [t.name, t.id] }, { :required => true },
                        :onchange => "updateIssueTemplateFrom('#{escape_javascript issue_template_form_path(:id => @issue_template.id, :format => 'js')}')" %></p>

        <%= render "limited_visibility_fields" if Redmine::Plugin.installed?(:redmine_limited_visibility) %>

        <%= render "typology_field", f: f if Redmine::Plugin.installed?(:redmine_typologies) %>

        <p><%= f.text_field :subject, :size => 80, :maxlength => 255, :required => true %></p>
        <p>
          <%= f.check_box :autocomplete_subject %>
          <%= link_to l(:label_open_functions_activated_description), '#',
                      class: 'icon-only icon-help',
                      style: "margin-top: -3px;margin-left: 4px;",
                      title: l(:label_open_functions_activated_description),
                      onclick: "showModal('help_autocomplete_subject', '500px'); return false;" %>
        </p>
        <%= render partial: 'issue_templates/help_autocomplete_subject' %>

        <p data-target="split-description.description_field">
          <%= f.label_for_field :description, :required => false %>
          <%= content_tag 'span', :id => "issue_description_and_toolbar" do %>
            <%= f.text_area :description,
                            :cols => 60,
                            :rows => (@issue_template.description.blank? ? 10 : [[10, @issue_template.description.length / 50].max, 100].min),
                            :accesskey => accesskey(:edit),
                            :class => 'wiki-edit',
                            :no_label => true %>
          <% end %>
        </p>
        <%= wikitoolbar_for 'issue_template_description' %>

        <div id="attributes" class="attributes">
          <div class="splitcontent">
            <div class="splitcontentleft">

              <% if @issue_template.safe_attribute?('status_id') %>
                <p><%= f.select :status_id, (IssueStatus.all.collect { |p| [p.name, p.id] }), { :required => true },
                                :onchange => "updateIssueTemplateFrom('#{escape_javascript issue_template_form_path(:id => @issue_template.id, :format => 'js')}')" %></p>
              <% end %>

              <% if @issue_template.safe_attribute? 'priority_id' %>
                <p><%= f.select :priority_id, (@priorities.collect { |p| [p.name, p.id] }), { :required => true }, :disabled => false %></p>
              <% end %>

              <% if @issue_template.safe_attribute? 'assigned_to_id' %>
                <p><%= f.select :assigned_to_id, principals_options_for_select(@issue_template.assignable_users, @issue_template.assigned_to), :include_blank => true, :required => false %></p>
              <% end %>

              <% if @issue_template.safe_attribute?('category_id') %>
                <p><%= f.select :category_id, (IssueCategory.all.collect { |c| [c.name, c.id] }), :include_blank => true, :required => false %></p>
              <% end %>

            </div>
            <div class="splitcontentright">

              <% if @issue_template.safe_attribute? 'start_date' %>
                <p><%= f.text_field :start_date, :size => 10, :disabled => false, :required => false %><%= calendar_for('issue_template_start_date') %></p>
              <% end %>

              <% if @issue_template.safe_attribute? 'due_date' %>
                <p><%= f.text_field :due_date, :size => 10, :disabled => false, :required => false %><%= calendar_for('issue_template_due_date') %></p>
              <% end %>

              <% if @issue_template.safe_attribute? 'estimated_hours' %>
                <p><%= f.text_field :estimated_hours, :size => 3, :disabled => false, :required => false %> <%= l(:field_hours) %></p>
              <% end %>

              <% if @issue_template.safe_attribute?('done_ratio') && Issue.use_field_for_done_ratio? %>
                <p><%= f.select :done_ratio, ((0..10).to_a.collect { |r| ["#{r * 10} %", r * 10] }), :required => false %></p>
              <% end %>
            </div>
          </div>

          <div class="splitcontent">
            <div class="splitcontentleft">
              <% i = 0 %>
              <% split_on = (@issue_template.custom_field_values.size / 2.0).ceil - 1 %>
              <% @issue_template.custom_field_values.each do |value| %>
                <p><%= custom_field_tag_with_label :issue_template, value, :required => false %></p>
                <% if i == split_on -%>
                  </div>
                  <div class="splitcontentright">
                <% end -%>
                <% i += 1 -%>
              <% end %>
              </div>
              </div>
          <% include_calendar_headers_tags %>
        </div>


        <% if Redmine::Plugin.installed?(:redmine_multiprojects_issue) %>
          <p id="projects_form">
            <% secondary_projects = @issue_template.assignable_secondary_projects || [] %>
            <% select_options = project_tree_options_for_select((allowed_projects | secondary_projects), :selected => secondary_projects) %>
            <%= f.select :secondary_project_ids,
                         select_options,
                         { :required => true, :label => l("related_projects") },
                         { :multiple => true } %>
          </p>
          <script>
              $('#issue_template_secondary_project_ids').select2();
          </script>
        <% end %>

        <div id="template_sections" style="display: none;" data-target="split-description.template_sections">

          <div class="sections">
            <h2 style="margin: -6px -6px 10px;">Sections</h2>
            <div id="split-description-groups" data-target="split-description.section_groups_fields">
              <%= render :partial => "issue_templates/section_groups_form", :locals => { f: f } %>
            </div>
            <p data-target="split-description.add_group_button">
              <button class="icon icon-add link-cursor" data-action="split-description#addSectionsGroup">Ajouter un
                groupe de sections
              </button>
            </p>
          </div>

        </div>

      </div>

    </div>

    <%= submit_tag l(:button_save_issue_template) %>

    <%= javascript_tag "$('#issue_template_template_title').focus();" %>


    <script type="text/javascript">
        $('#issue-template-form').bind('submit', function () {
            $(this).find(':input').removeAttr('disabled');
        });

        function buildSelectprojectsModal(id) {
            var project_ids = $('#issue_template_template_project_ids').val();
            if (project_ids.length == 0) {
                project_ids = ''
            }

            $.ajax({
                url: "<%= render_select_projects_modal_by_ajax_path(template_id: @issue_template.id) %>",
                type: 'POST',
                data: {project_ids: project_ids},
                success: function (response) {
                    $('#ajax-indicator').removeClass('bottom');
                    if (response) {
                        $('#ajax-modal').html(response.html);
                        showModal("ajax-modal", "1000px");
                        $("#button_apply_projects").focus();
                    }
                }, error: function (response) {
                    $('#ajax-indicator').removeClass('bottom');
                    console.error(response);
                },
            });
        }
    </script>

    <%= render 'valid_similar_existing_templates' if @issue_template.new_record? %>

  <% end %>

  <div id="custom_form_container">
    <%= render 'custom_form' %>
  </div>

</div>
<script>
    $(document).ready(function () {
        $("#link_update_project_list").click(function (e) {
            e.preventDefault();
            buildSelectprojectsModal();
            $('#ajax-indicator').show();
        });
    });
</script>
